service: udacity-capstone-api
app: udacity-serverless-blog

plugins:
  # define iam permissions at function level
  - serverless-iam-roles-per-function

# referring to functions - gives more control for optimised deployments
package:
  individually: true

# stage/region defaults set if not overridden when running serverless commands
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  profile: serverless-marco

  environment:
    APP_NAME: udacity-serverless-blog
    POSTS_TABLE: ${self:provider.stage}-posts
    PROFILES_TABLE: ${self:provider.stage}-profiles

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreatePost:
    handler: src/lambda/http/createPost.handler
    events:
      - http:
          path: /posts
          method: post
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/requestValidators/createPost.json)}
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-create-post-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}

resources:
  # API Gateway errors
  - ${file(src/resources/api-gateway-errors.yml)}
  # DynamoDB-Posts
  - ${file(src/resources/dynamodb-posts-table.yml)}
  # DynamoDB-Profiles
  - ${file(src/resources/dynamodb-profiles-table.yml)}
  # S3 - monolithic bucket will do for demo purposes
  - ${file(src/resources/s3-bucket.yml)}
